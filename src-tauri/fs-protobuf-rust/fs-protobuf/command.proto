syntax = "proto3";

import "board.proto";

package mcfs.command;


/**
 * A single command a board should complete immediately
 *
 * | Field      | Description                                                  |
 * |------------|--------------------------------------------------------------|
 * | command    | The specific command to complete                             |
 */
message Command {
    oneof command {
        ClickValve click_valve = 1;
        SetLED set_led = 2;
    }
}


/**
 * Provides a directive on how to capture and log data.
 *
 * | Field      | Description                                                  |
 * |------------|--------------------------------------------------------------|
 * | node       | The node to collect data for                                 |
 * | level      | What types of data to capture                                |
 * | freq_log   | How frequently to write to local disk                        |
 * | freq_send  | How frequently to send data to connected consumers           |
 */


// TODO: change this to handle how a channel should be configured, such as 
// register settings
//  message DataDirective {
//     mcfs.board.NodeIdentifier node = 1;
//     optional mcfs.common.LogLevel level = 2;
//     optional float freq_log = 3;
//     optional float freq_send = 4;
// }

/**
 * Sets a valve to a desired state
 *
 * | Field      | Description                                                  |
 * |------------|--------------------------------------------------------------|
 * | valve      | The valve node to set                                        |
 * | state      | The desired valve state                                      |
 */
message ClickValve {
    mcfs.board.ChannelIdentifier valve = 1;
    mcfs.board.ValveState state = 2;
}

/**
 * Turns an LED on or off
 *
 * | Field      | Description                                                  |
 * |------------|--------------------------------------------------------------|
 * | led        | The led node to toggle                                       |
 * | state      | The desired led state                                        |
 */
message SetLED {
    mcfs.board.ChannelIdentifier led = 1;
    mcfs.board.LEDState state = 2; 
}
